stock_prices = []
for i in range(len(urls)):
    temp = []
    values = requests.get(urls[i])
    temp.extend(values.json()['dataset']['data'])
    stock_prices.append(temp)

import numpy as np
from sklearn.svm import SVR
import matplotlib.pyplot as plt

from datetime import datetime
import time

dates = [[x[0]] for x in stock_prices[0]]
dates.reverse()
t = datetime(2017, 1, 1, 0, 0)
base_seconds = time.mktime(t.timetuple())

for i in range(len(dates)):
    dates[i][0] = (time.mktime(datetime.strptime(dates[i][0], "%Y-%m-%d").timetuple()) - base_seconds)
    dates[i][0] = int(int(dates[i][0]) / 68400)

X = np.array(dates)
values = [x[1] for x in stock_prices[0]]
values.reverse()
y = np.array(values)

# model = svm.svc(kernel='linear', c=1, gamma=1)

# #############################################################################
# Fit regression model
svr_rbf = SVR(kernel='rbf', C=100, gamma=0.1, epsilon=.1)
svr_lin = SVR(kernel='linear', C=100, gamma='auto')
svr_poly = SVR(kernel='poly', C=100, gamma='auto', degree=3, epsilon=.1,
               coef0=1)
y_rbf = svr_rbf.fit(X, y).predict(X)
y_lin = svr_lin.fit(X, y).predict(X)
y_poly = svr_poly.fit(X, y).predict(X)

lw = 2

# svrs = [svr_rbf, svr_lin, svr_poly]
svrs = [svr_rbf]
kernel_label = ['RBF', 'Linear', 'Polynomial']
model_color = ['m', 'c', 'g']

fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15, 10), sharey=True)
for ix, svr in enumerate(svrs):
    axes[ix].plot(X, svr.fit(X, y).predict(X), color=model_color[ix], lw=lw,
                  label='{} model'.format(kernel_label[ix]))
    axes[ix].scatter(X[svr.support_], y[svr.support_], facecolor="none",
                     edgecolor=model_color[ix], s=50,
                     label='{} support vectors'.format(kernel_label[ix]))
    axes[ix].scatter(X[np.setdiff1d(np.arange(len(X)), svr.support_)],
                     y[np.setdiff1d(np.arange(len(X)), svr.support_)],
                     facecolor="none", edgecolor="k", s=50,
                     label='other training data')
    axes[ix].legend(loc='upper center', bbox_to_anchor=(0.5, 1.1),
                    ncol=1, fancybox=True, shadow=True)

fig.text(0.5, 0.04, 'data', ha='center', va='center')
fig.text(0.06, 0.5, 'target', ha='center', va='center', rotation='vertical')
fig.suptitle("Support Vector Regression", fontsize=14)
plt.show()
